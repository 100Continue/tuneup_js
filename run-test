#!/usr/bin/env ruby -wKU

require "fileutils"
require "optparse"
require "ostruct"
require "pty"
require "tempfile"
require File.expand_path(File.join(File.dirname(__FILE__), "colorize"))
require File.expand_path(File.join(File.dirname(__FILE__), "preprocessor"))

options = OpenStruct.new
options.env_vars = {}
options.colorize = true

opts_parser = OptionParser.new do |opts|
  opts.banner = "USAGE: run-test-script <app bundle> <test script> <output directory> [optional args]" +
    "\n  If <app bundle> is the name of the app without extension, the newest bundle is located autmatically"

  opts.on("-d", "--device DEVICE", "Device UDID to run test against,",
          "or 'dynamic' to find the UDID at runtime") do |dev|
    options.device = dev
  end

  opts.on("-e", "--environment ENV", "Pass variables in the form of name=value") do |env|
    key, value = env.split '='
    options.env_vars[key] = value
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end

  opts.on("-t", "--timeout DURATION", OptionParser::DecimalInteger,
          "Maximum time in seconds with no output") do |t|
    options.timeout = t
  end

  opts.on("-v", "--verbose", "Produce more output") do
    options.verbose = true
  end
  
  opts.on("-n", "--no-colors", "Don't colorize the output") do
    options.colorize = false
  end
  
  opts.on("-p", "--preprocess", "Use own preprocessor to substitude imports") do
    options.preprocess = true
  end
end

unless ARGV.length >= 3
  STDERR.puts opts_parser.help
  exit 1
end

app_bundle, test_script, test_output = ARGV.shift 3

begin
  opts_parser.parse!
rescue OptionParser::ParseError => e
  puts e
  puts opts_parser
  exit 1
end

# Dynamic UDID
# Discussion: better to have a separate command line option for dynamic?
if options.device then
  if options.device.length == 40
    # UDID provided
  elsif options.device == "dynamic"
    ioreg_output = `ioreg -w 0 -rc IOUSBDevice -k SupportsIPhoneOS`
    if ioreg_output =~ /"USB Serial Number" = "([0-9a-z]+)"/ then
      options.device = $1
    else
      raise "Couldn't get the UDID using ioreg"
    end
  else
    raise "Invalid UDID with length #{options.device.length} provided"
  end
end

# Check for already running instrument processes
instrument_pids = `/usr/bin/pgrep -i '^instruments$'`
if $? == 0 then
  warn "\n### There are other 'instrument' processes running that may interfere - consider terminating them first:\nkill -9 " +
    instrument_pids.gsub(/\s+/, " ")
end

# Find the bundle path at runtime
# Discussion: better to have a command line option for app_name,
# than using a "bare" app_bundle to specify app_name?
app_name = File.basename(app_bundle, ".*")
if app_bundle == app_name then
  # List existing bundles, newest first
  mdargs = 'kMDItemDisplayName == "' + app_name + '.app" || ' +
    'kMDItemAlternateNames == "' + app_name + '.app"'
  bundle_paths = `mdfind -0 '#{mdargs}' | xargs -0 ls -dt`.split(/\n/)
  if options.device
    bundles = bundle_paths.grep(/\/(Debug|Release)-iphoneos\//)
  else
    bundles = bundle_paths.grep(/\/iPhone Simulator\/|\/(Debug|Release)-iphonesimulator\//)
  end
  if bundles.size > 0
    app_bundle = bundles[0]
    puts "Found relevant bundles (newest first):", bundles, "\n" if options.verbose
    puts "Using bundle:", app_bundle, "\n"
  else
    STDERR.puts "Matching but irrelevant bundles:", bundle_paths if bundle_paths.size > 0
    raise "No output bundles found for app #{app_name}"
  end
end

# Instruments wants the test_script and app_bundle to be a fully-qualified path
test_script = File.expand_path(test_script)
raise "Test script '#{test_script}' doesn't exist" unless File.exist?(test_script)
app_bundle = File.expand_path(app_bundle)
raise "App bundle '#{app_bundle}' doesn't exist" unless File.directory?(app_bundle)

# apply custom preprocessing to test_script
temp_file = nil
if options.preprocess
  puts "Preprocessing file..." if options.verbose
  temp_file = Tempfile.new(File.basename(test_script))
  temp_file.write(Preprocessor.process test_script)
  temp_file.flush
  test_script = temp_file.path
  puts "contents written to temp file #{temp_file.path}", "\n" if options.verbose
end

# instrument cli helper does not recognise any relative directory.
# expand the relative directory and throw an exception if it does not texist.
test_output = File.expand_path(test_output)
raise 'Output directory #{test_output} does not exist' unless File.directory?(test_output)

SDKROOT = `/usr/bin/xcodebuild -version -sdk iphoneos | grep PlatformPath`.split(":")[1].chomp.sub(/^\s+/, "")
XCODE_ROOT = `/usr/bin/xcode-select -print-path`.chomp.sub(/^\s+/, "")

TEMPLATE = `[ -f /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate ] && echo "#{SDKROOT}/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate" || echo "#{XCODE_ROOT}/../Applications/Instruments.app/Contents/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate"`.chomp.sub(/^\s+/, "")

command = ["/usr/bin/instruments"]
command << "-w" << options.device if options.device
command << "-t" << "#{TEMPLATE}"
command << app_bundle
command << "-e" << "UIASCRIPT" << test_script
command << "-e" << "UIARESULTSPATH" << test_output
options.env_vars.to_a.each do |pair|
  command << "-e"
  command.concat(pair)
end
puts "command=" + command.map { |s| s.sub(/\A(.*\s.*)\Z/, '"\1"') }.join(' ') if options.verbose

failed = false

unless File.directory? test_output
  FileUtils.mkdir_p test_output
end

def colorize(type, line)
  if /start/i =~ type
    return line.cyan
  elsif /pass/i =~ type
    return line.green
  elsif /fail/i =~ type || /error/i =~ type
    return line.red
  elsif /warning/i =~ type || /issue/i =~ type
    return line.yellow
  else
    return line
  end
end

Dir.chdir(test_output) do
  begin
    PTY.spawn(*command) do |r, w, pid|
      running = true
      while running do
        if IO.select([r], nil, nil, options.timeout) then
          line = r.readline.strip
          _, date, time, tz, type, msg = line.match(/^(\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}) ([+-]\d{4}) ([^:]+): (.*)$/).to_a

          
          puts "\n" if /start/i =~ type     # add a blank line before each test to visually group the output
          line = colorize(type, line) if options.colorize
          puts line

          case type
          when "Fail", "Error"
            failed = true
          end
        else
          failed = true
          running = false
          warn "\n### Timeout #{options.timeout} reached without any output - " +
            "killing Instruments (pid #{pid})..."
          begin
            Process.kill(9, pid)
            w.close
            r.close
            Process.wait(pid)
          rescue PTY::ChildExited
          end
          puts "Pid #{pid} killed."
        end
      end
    end
  rescue Errno::EIO
  rescue EOFError
  rescue PTY::ChildExited => e
    message = "Instruments exited unexpectedly"
    STDERR.puts options.colorize ? message.red : message
    exit 1
  end

  if failed
    message = "#{test_script} failed, see log output for details"
    STDERR.puts options.colorize ? message.red : message
    exit 1
  else
    message = "TEST PASSED"
    STDOUT.puts options.colorize ? message.green : message
  end
end

if temp_file and options.preprocess
  temp_file.close
  temp_file.unlink
  puts "Deleted temp file #{temp_file.path}"
end
